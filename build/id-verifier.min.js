import e,{verifySignatureWithPem as r}from"trusted-issuer-registry";import*as t from"asn1js";import{Certificate as o}from"pkijs";import*as i from"cbor2";import{CipherSuite as n,Aes128Gcm as s,HkdfSha256 as a,DhkemP256HkdfSha256 as c}from"@hpke/core";const u=["all_trust_lists"],d={PHOTO_ID:"org.iso.23220.photoid.1",EU_PERSONAL_ID:"eu.europa.ec.eudi.pid.1",JAPAN_MY_NUMBER_CARD:"org.iso.23220.1.jp.mnc",MOBILE_DRIVERS_LICENSE:"org.iso.18013.5.1.mDL"},_={OPENID4VP:"openid4vp-v1-unsigned",MDOC:"org-iso-mdoc"},l={MSO_MDOC:"mso_mdoc"},p={[_.OPENID4VP]:[l.MSO_MDOC],[_.MDOC]:[l.MSO_MDOC]},createCredentialId=(e,r)=>`cred-${e.replace(/[^a-zA-Z0-9]/g,"_")}-${r.replace(/[^a-zA-Z0-9]/g,"_")}`,g={"cred-mso_mdoc-org_iso_23220_photoid_1":{format:l.MSO_MDOC,documentType:d.PHOTO_ID},"cred-mso_mdoc-eu_europa_ec_eudi_pid_1":{format:l.MSO_MDOC,documentType:d.EU_PERSONAL_ID},"cred-mso_mdoc-org_iso_23220_1_jp_mnc":{format:l.MSO_MDOC,documentType:d.JAPAN_MY_NUMBER_CARD},"cred-mso_mdoc-org_iso_18013_5_1_mDL":{format:l.MSO_MDOC,documentType:d.MOBILE_DRIVERS_LICENSE}},f={AGE:"age",AGE_OVER_18:"age_over_18",AGE_OVER_21:"age_over_21",BIRTH_DATE:"birth_date",BIRTH_YEAR:"birth_year",FAMILY_NAME:"family_name",GIVEN_NAME:"given_name",SEX:"sex",HEIGHT:"height",WEIGHT:"weight",EYE_COLOR:"eye_color",HAIR_COLOR:"hair_color",ADDRESS:"address",CITY:"city",STATE:"state",POSTAL_CODE:"postal_code",COUNTRY:"country",NATIONALITY:"nationality",PLACE_OF_BIRTH:"place_of_birth",DOCUMENT_NUMBER:"document_number",ISSUING_AUTHORITY:"issuing_authority",ISSUING_COUNTRY:"issuing_country",ISSUING_JURISDICTION:"issuing_jurisdiction",ISSUE_DATE:"issue_date",EXPIRY_DATE:"expiry_date",DRIVING_PRIVILEGES:"driving_privileges",PORTRAIT:"portrait",SIGNATURE:"signature"},y={[l.MSO_MDOC]:{[d.PHOTO_ID]:{[f.GIVEN_NAME]:["org.iso.23220.1","given_name_unicode"],[f.FAMILY_NAME]:["org.iso.23220.1","family_name_unicode"],[f.BIRTH_DATE]:["org.iso.23220.1","birth_date"],[f.BIRTH_YEAR]:["org.iso.23220.1","age_birth_year"],[f.AGE]:["org.iso.23220.1","age_in_years"],[f.AGE_OVER_18]:["org.iso.23220.1","age_over_18"],[f.AGE_OVER_21]:["org.iso.23220.1","age_over_21"],[f.ADDRESS]:["org.iso.23220.1","resident_address_unicode"],[f.CITY]:["org.iso.23220.1","resident_city_unicode"],[f.STATE]:["org.iso.23220.photoid.1","resident_state"],[f.POSTAL_CODE]:["org.iso.23220.1","resident_postal_code"],[f.COUNTRY]:["org.iso.23220.1","resident_country"],[f.NATIONALITY]:["org.iso.23220.1","nationality"],[f.SEX]:["org.iso.23220.1","sex"],[f.PLACE_OF_BIRTH]:["org.iso.23220.1","birthplace"],[f.DOCUMENT_NUMBER]:["org.iso.23220.1","document_number"],[f.ISSUING_AUTHORITY]:["org.iso.23220.1","issuing_authority_unicode"],[f.ISSUING_COUNTRY]:["org.iso.23220.1","issuing_country"],[f.ISSUING_JURISDICTION]:["org.iso.23220.1","issuing_subdivision"],[f.ISSUE_DATE]:["org.iso.23220.1","issue_date"],[f.EXPIRY_DATE]:["org.iso.23220.1","expiry_date"],[f.PORTRAIT]:["org.iso.23220.1","portrait"]},[d.EU_PERSONAL_ID]:{[f.GIVEN_NAME]:["eu.europa.ec.eudi.pid.1","given_name"],[f.FAMILY_NAME]:["eu.europa.ec.eudi.pid.1","family_name"],[f.BIRTH_DATE]:["eu.europa.ec.eudi.pid.1","birth_date"],[f.BIRTH_YEAR]:["eu.europa.ec.eudi.pid.1","age_birth_year"],[f.AGE]:["eu.europa.ec.eudi.pid.1","age_in_years"],[f.AGE_OVER_18]:["eu.europa.ec.eudi.pid.1","age_over_18"],[f.AGE_OVER_21]:["eu.europa.ec.eudi.pid.1","age_over_21"],[f.ADDRESS]:["eu.europa.ec.eudi.pid.1","resident_address"],[f.CITY]:["eu.europa.ec.eudi.pid.1","resident_city"],[f.STATE]:["eu.europa.ec.eudi.pid.1","resident_state"],[f.POSTAL_CODE]:["eu.europa.ec.eudi.pid.1","resident_postal_code"],[f.COUNTRY]:["eu.europa.ec.eudi.pid.1","resident_country"],[f.NATIONALITY]:["eu.europa.ec.eudi.pid.1","nationality"],[f.SEX]:["eu.europa.ec.eudi.pid.1","sex"],[f.PLACE_OF_BIRTH]:["eu.europa.ec.eudi.pid.1","birth_place"],[f.DOCUMENT_NUMBER]:["eu.europa.ec.eudi.pid.1","document_number"],[f.ISSUING_AUTHORITY]:["eu.europa.ec.eudi.pid.1","issuing_authority"],[f.ISSUING_COUNTRY]:["eu.europa.ec.eudi.pid.1","issuing_country"],[f.ISSUING_JURISDICTION]:["eu.europa.ec.eudi.pid.1","issuing_jurisdiction"],[f.ISSUE_DATE]:["eu.europa.ec.eudi.pid.1","issuance_date"],[f.EXPIRY_DATE]:["eu.europa.ec.eudi.pid.1","expiry_date"],[f.PORTRAIT]:["eu.europa.ec.eudi.pid.1","portrait"]},[d.JAPAN_MY_NUMBER_CARD]:{[f.GIVEN_NAME]:["org.iso.23220.1","given_name_unicode"],[f.FAMILY_NAME]:["org.iso.23220.1","family_name_unicode"],[f.BIRTH_DATE]:["org.iso.23220.1","birth_date"],[f.BIRTH_YEAR]:["org.iso.23220.1","age_birth_year"],[f.AGE]:["org.iso.23220.1","age_in_years"],[f.AGE_OVER_18]:["org.iso.23220.1","age_over_18"],[f.AGE_OVER_21]:["org.iso.23220.1","age_over_21"],[f.ADDRESS]:["org.iso.23220.1.jp","resident_address_unicode"],[f.CITY]:["org.iso.23220.1","resident_city_unicode"],[f.POSTAL_CODE]:["org.iso.23220.1","resident_postal_code"],[f.COUNTRY]:["org.iso.23220.1","resident_country"],[f.NATIONALITY]:["org.iso.23220.1","nationality"],[f.SEX]:["org.iso.23220.1","sex"],[f.PLACE_OF_BIRTH]:["org.iso.23220.1","birthplace"],[f.DOCUMENT_NUMBER]:["org.iso.23220.1","document_number"],[f.ISSUING_AUTHORITY]:["org.iso.23220.1","issuing_authority_unicode"],[f.ISSUING_COUNTRY]:["org.iso.23220.1","issuing_country"],[f.ISSUING_JURISDICTION]:["org.iso.23220.1","issuing_subdivision"],[f.ISSUE_DATE]:["org.iso.23220.1","issue_date"],[f.EXPIRY_DATE]:["org.iso.23220.1","expiry_date"],[f.PORTRAIT]:["org.iso.23220.1","portrait"]},[d.MOBILE_DRIVERS_LICENSE]:{[f.GIVEN_NAME]:["org.iso.18013.5.1","given_name"],[f.FAMILY_NAME]:["org.iso.18013.5.1","family_name"],[f.BIRTH_DATE]:["org.iso.18013.5.1","birth_date"],[f.BIRTH_YEAR]:["org.iso.18013.5.1","age_birth_year"],[f.AGE]:["org.iso.18013.5.1","age_in_years"],[f.AGE_OVER_18]:["org.iso.18013.5.1","age_over_18"],[f.AGE_OVER_21]:["org.iso.18013.5.1","age_over_21"],[f.HEIGHT]:["org.iso.18013.5.1","height"],[f.WEIGHT]:["org.iso.18013.5.1","weight"],[f.EYE_COLOR]:["org.iso.18013.5.1","eye_colour"],[f.HAIR_COLOR]:["org.iso.18013.5.1","hair_colour"],[f.ADDRESS]:["org.iso.18013.5.1","resident_address"],[f.CITY]:["org.iso.18013.5.1","resident_city"],[f.STATE]:["org.iso.18013.5.1","resident_state"],[f.POSTAL_CODE]:["org.iso.18013.5.1","resident_postal_code"],[f.COUNTRY]:["org.iso.18013.5.1","resident_country"],[f.NATIONALITY]:["org.iso.18013.5.1","nationality"],[f.SEX]:["org.iso.18013.5.1","sex"],[f.PLACE_OF_BIRTH]:["org.iso.18013.5.1","birth_place"],[f.DOCUMENT_NUMBER]:["org.iso.18013.5.1","document_number"],[f.ISSUING_AUTHORITY]:["org.iso.18013.5.1","issuing_authority"],[f.ISSUING_COUNTRY]:["org.iso.18013.5.1","issuing_country"],[f.ISSUING_JURISDICTION]:["org.iso.18013.5.1","issuing_jurisdiction"],[f.ISSUE_DATE]:["org.iso.18013.5.1","issue_date"],[f.EXPIRY_DATE]:["org.iso.18013.5.1","expiry_date"],[f.DRIVING_PRIVILEGES]:["org.iso.18013.5.1","driving_privileges"],[f.PORTRAIT]:["org.iso.18013.5.1","portrait"],[f.SIGNATURE]:["org.iso.18013.5.1","signature_usual_mark"]}}},E={};for(const e in y){E[e]={};for(const r in y[e]){E[e][r]={};for(const t in y[e][r]){let o=y[e][r][t];o=o[o.length-1],E[e][r][o]=t}}}const A={[-7]:{name:"ECDSA",hash:"SHA-256",namedCurve:"P-256"},[-35]:{name:"ECDSA",hash:"SHA-384",namedCurve:"P-384"},[-36]:{name:"ECDSA",hash:"SHA-512",namedCurve:"P-521"},[-37]:{name:"RSASSA-PSS",hash:"SHA-256"},[-38]:{name:"RSASSA-PSS",hash:"SHA-384"},[-39]:{name:"RSASSA-PSS",hash:"SHA-512"},[-257]:{name:"RSASSA-PKCS1-v1_5",hash:"SHA-256"},[-258]:{name:"RSASSA-PKCS1-v1_5",hash:"SHA-384"},[-259]:{name:"RSASSA-PKCS1-v1_5",hash:"SHA-512"}},S={1:"OKP",2:"EC",3:"RSA"},h={1:"P-256",2:"P-384",3:"P-521",6:"Ed25519",7:"Ed448",8:"X25519",9:"X448"},I={"EC-P-256":{name:"ECDSA",namedCurve:"P-256"},"EC-P-384":{name:"ECDSA",namedCurve:"P-384"},"EC-P-521":{name:"ECDSA",namedCurve:"P-521"},"OKP-Ed25519":{name:"Ed25519"},"OKP-Ed448":{name:"Ed448"},"OKP-X25519":{name:"ECDH"},"OKP-X448":{name:"ECDH"},RSA:{name:"RSASSA-PKCS1-v1_5",hash:"SHA-256"}},base64urlToUint8Array=e=>{const r=e.replace(/-/g,"+").replace(/_/g,"/");return(e=>{if("function"==typeof Buffer)return new Uint8Array(Buffer.from(e,"base64"));if("function"==typeof atob){const r=atob(e),t=new Uint8Array(r.length);for(let e=0;e<r.length;e++)t[e]=r.charCodeAt(e);return t}throw new Error("No base64 decoder available in this environment")})(r+(r.length%4==0?"":"=".repeat(4-r.length%4)))},bufferToBase64Url=e=>{const r=(e=>{let r;if(e instanceof Uint8Array)r=e;else if(e instanceof ArrayBuffer)r=new Uint8Array(e);else{if(!(e.buffer instanceof ArrayBuffer))throw new Error("Invalid input type");r=new Uint8Array(e.buffer).slice(e.byteOffset,e.byteOffset+e.byteLength)}let t="";for(let e=0;e<r.byteLength;e++)t+=String.fromCharCode(r[e]);return"function"==typeof Buffer?Buffer.from(t,"binary").toString("base64"):btoa(t)})(e);return r.replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")};let m=new e;const O=864e5;let v,R,w=0;const setTestDataUsage=r=>{m=new e({useTestData:r}),w=0,R=0,v=null},getIssuer=async e=>{try{const o=(e=>{if(!e)return null;const r=e.extensions?.find(e=>"2.5.29.35"===e.extnID);if(r)try{const e=t.fromBER(r.extnValue.valueBlock.valueHex);if(e.result.valueBlock.value)return bufferToBase64Url(e.result.valueBlock.value[0].valueBlock.valueHex)}catch(e){console.error("Could not parse AuthorityKeyIdentifier value",e)}return null})(e);if(!o)return null;!async function(){if(v)R<Date.now()-O&&logEndOfLifeWarning();else if(w<Date.now()-O){try{v=await m.getEndOfLifeDate()}catch(e){console.error("Error encountered while trying to get trusted-issuer-registry end of life date"),console.error(e)}v&&logEndOfLifeWarning(),w=Date.now()}}();const i=await m.getIssuerFromX509AKI(o);if(!i)return null;const n=await(async(e,t)=>{if(!t||!Array.isArray(t))return console.error("Unexpected input, no issuer certificates provided or not an array"),null;let o,i;try{o=e.signatureValue.valueBlock.valueHex;const r=e.tbsView;i=new Uint8Array(r)}catch(e){return console.error("Could not parse signature value from certificate",e),null}for(let e=0;e<t.length;e++){const n=t[e];try{if("string"==typeof n.data&&await r(n.data,o,i))return n}catch(e){continue}}return null})(e,i.certificates);return n?(delete i.certificates,i.certificate=n,i):null}catch(e){return console.error("Error getting issuer",e),null}};function logEndOfLifeWarning(){v.getTime()<Date.now()?console.warn(`trusted-issuer-registry minor version ${e.minorVersion} has reached its end of life, please update to the latest major/minor version as soon as possible to receive the latest issuer information`):console.warn(`trusted-issuer-registry minor version ${e.minorVersion} reaching end of life on ${v.toISOString().split("T")[0]}, please update to the latest major/minor version before then to avoid outdated issuer information`),R=Date.now()}const verifyCoseSign1=async(e,r)=>{try{const[t,o,n,s]=e,a=(await i.decode(t)).get(1),c=["Signature1",t,new Uint8Array(0),n||null],u=i.encode(c);return await crypto.subtle.verify(A[a],r,s,u)}catch(e){throw console.error("Error verifying COSE_Sign1 signature:",e),e}},jwkToCoseKey=e=>{if("EC"!==e.kty)throw new Error("Only EC keys supported at this time. Open a pull request if you need support for other key types.");if("P-256"!==e.crv)throw new Error("Only P-256 curve supported at this time. Open a pull request if you need support for other curves.");const r=base64urlToUint8Array(e.x),t=base64urlToUint8Array(e.y),o=new Map;return o.set(1,2),o.set(-1,1),o.set(-2,r),o.set(-3,t),o},decodeVpToken=async e=>{const r=base64urlToUint8Array(e);return await i.decode(r)},verifyDocument=async(e,r)=>{const n={},s=[],{docType:a,issuerSigned:c,deviceSigned:u}=e,{issuerAuth:d,nameSpaces:_}=c,{valid:l,issuerAuthPayload:p,certificate:g,invalidReason:f}=await async function(e){let r,n;const[s,a,c,u]=e,d=await i.decode(s),_=await i.decode(c),l=i.decode(_.contents),p=new Date;new Date(l.validityInfo.validFrom)>p?r="MSO is not yet valid":new Date(l.validityInfo.validUntil)<p&&(r="MSO is expired");if(!r){const i=d.get(1),s=a.get(32),c=a.get(33);if(a.get(34),a.get(35),s||c&&(n=(e=>{if(e instanceof Array&&(e=e[0]),!e)return null;const r=e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength),i=t.fromBER(r);return new o({schema:i.result})})(c)),n){const t=await(async(e,r)=>{try{const t=e.subjectPublicKeyInfo.toSchema().toBER(),o=A[r];return await crypto.subtle.importKey("spki",t,o,!1,["verify"])}catch(e){throw console.error("Error converting X.509 to SPKI:",e),e}})(n,i);await verifyCoseSign1(e,t)||(r="IssuerAuth signature verification failed")}else r="No certificate found in IssuerAuth header"}return{certificate:n,issuerAuthPayload:l,valid:!r,invalidReason:r}}(d);l||s.push(f);const y=await async function(e,r,t){const{deviceAuth:o,nameSpaces:n}=e,{deviceSignature:s}=o,{deviceKeyInfo:a,docType:c}=r,u=await(async e=>{const r=S[e.get(1)],t=h[e.get(-1)],o="RSA"==r?I.RSA:I[`${r}-${t}`];if(!r||!t||!o)throw new Error("Unsupported kty or crv");const i=bufferToBase64Url(e.get(-2)),n=bufferToBase64Url(e.get(-3)),s={kty:r,ext:!0,key_ops:["verify"]};return"EC"===r?(s.x=i,s.y=n,s.crv=t):"OKP"===r?(s.x=i,s.crv=t):"RSA"===r&&(s.n=t,s.e=i),await crypto.subtle.importKey("jwk",s,o,!0,["verify"])})(a.deviceKey),d=i.encode(["DeviceAuthentication",i.decode(t),c,n]),_=i.encode(new i.Tag(24,d));return await verifyCoseSign1([s[0],s[1],_,s[3]],u)}(u,p,r);y||s.push("Failed to verify device authentication");let E=!0;for(const e in _)for(const r of _[e]){!await setClaim(n,a,e,r,p)&&E&&(E=!1,s.push("Claim values don't match IssuerAuth value digests"))}return{claims:n,issuer:await getIssuer(g),valid:l&&y&&E,invalidReasons:s}};async function setClaim(e,r,t,o,n){const{isValid:s,decodedClaim:a}=await async function(e,r,t){const o=i.decode(r.contents),n=o.digestID,s=t.valueDigests[e].get(n),a=i.encode(r),c=await crypto.subtle.digest("SHA-256",a);return{isValid:uint8ArrayBytewiseEqual(new Uint8Array(c),s),decodedClaim:o}}(t,o,n);let c=a.elementIdentifier,u=a.elementValue;if(1004===u.tag)u=u.contents;else if("org.iso.18013.5.1"===t){if("sex"===c&&"number"==typeof u)u=1===u?"M":2===u?"F":null;else if("driving_privileges"===c&&u&&u.length>0){u=JSON.parse(JSON.stringify(u));for(const e of u)for(const r in e)1004===e[r]?.tag&&(e[r]=e[r].contents)}}else"org.iso.23220.1"===t?"birth_date"===c&&u.birth_date&&1004===u.birth_date.tag?u=u.birth_date.contents:"sex"===c&&"number"==typeof u&&(u=1===u?"M":2===u?"F":null):"eu.europa.ec.eudi.pid.1"===t&&"sex"===c&&"number"==typeof u&&(u=1===u?"M":2===u?"F":null);const d=E[l.MSO_MDOC][r][c];return d&&(c=d),e[c]=u,s}function uint8ArrayBytewiseEqual(e,r){return e.length===r.length&&e.every((e,t)=>e===r[t])}const T=new class{constructor(){this.protocol=_.OPENID4VP}createRequest(e,r,t){const o=this._createQueryCredentials(e,r);return o.length>0?{protocol:this.protocol,data:{dcql_query:{credentials:o},nonce:t,response_mode:"dc_api",response_type:"vp_token"}}:null}_createQueryCredentials(e,r){const t=[];for(const o of p[this.protocol])for(const i of e){const e=[];if(r.forEach(r=>{const t=y[o]?.[i]?.[r];t&&e.push({path:t})}),e.length>0){const r={format:o,id:createCredentialId(o,i),claims:e,meta:{}};o===l.MSO_MDOC?r.meta.doctype_value=i:o===l.DC_SD_JWT?r.meta.vct_values=[]:o===l.LDP_VC&&(r.meta.type_values=[]),t.push(r)}}return t}async verify(e,r,t,o){const i=e.vp_token;for(const e in i)if(g[e].format===l.MSO_MDOC)return this._verifyMsoMdoc(i[e],r,t,o);throw new Error("Unsupported credential format")}async _verifyMsoMdoc(e,r,t,o){const i=[],n=[],s=[],a={};let c=!0,d=!0;const _=await this._generateSessionTranscript(t,o);for(const r of e){const e=await decodeVpToken(r);console.log("decoded",e),n.push(e)}for(const e of n)s.push(...e.documents);for(const e of s){const{claims:t,issuer:o,valid:n,invalidReasons:s}=await verifyDocument(e,_),l=o&&(r==u||o.certificate.trust_lists.some(e=>r.includes(e)));c=c&&l,d=d&&n;for(const e in t)a[e]=t[e];const p={claims:t,valid:n,trusted:!!l,document:e};o&&(p.issuer=o),n||(p.invalidReasons=s),i.push(p)}return{claims:a,valid:!!d,trusted:!!c,processedDocuments:i,sessionTranscript:_}}async _generateSessionTranscript(e,r,t=null){if(!e)throw new Error("Origin is required for generating session transcript");if(!r)throw new Error("Nonce is required for generating session transcript");const o=[e,r,t],n=i.encode(o),s=await crypto.subtle.digest("SHA-256",n),a=["OpenID4VPDCAPIHandover",new Uint8Array(s)];return i.encode([null,null,a])}};const C=new class{constructor(){this.protocol=_.MDOC}createRequest(e,r,t,o){const i=this._createDeviceRequest(e,r),n=this._createEncryptionInfo(t,o);return i?{protocol:this.protocol,data:{deviceRequest:i,encryptionInfo:n}}:null}_createDeviceRequest(e,r){const t=[],o=[];let n=0;for(const s of e){const e={};if(r.forEach(r=>{const t=y[l.MSO_MDOC]?.[s]?.[r];t&&(e[t[0]]||(e[t[0]]={}),e[t[0]][t[1]]=!0)}),Object.keys(e).length>0){const r={docType:s,nameSpaces:e};t.push({itemsRequest:new i.Tag(24,i.encode(r))}),o.push([n++])}}const s=new i.Tag(24,i.encode({useCases:[{mandatory:!0,documentSets:o}]}));return bufferToBase64Url(i.encode({version:"1.1",docRequests:t,readerAuthAll:[],deviceRequestInfo:s}))}_createEncryptionInfo(e,r){const t=new Uint8Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=parseInt(e.substr(r,2),16);const o=i.encode(["dcapi",{nonce:t,recipientPublicKey:jwkToCoseKey(r)}]);return bufferToBase64Url(o)}async verify(e,r,t,o,i){const n=e.response,s=await decodeVpToken(n);if(!Array.isArray(s)||"dcapi"!==s[0])throw new Error("Expected decoded response to be an array with dcapi as first element");const{enc:a,cipherText:c}=s[1]||{};if(!a||!c)throw new Error("Expected enc and cipherText in decoded response");const u=await this._generateSessionTranscript(t,o,i),d=await this._decryptCipherText(c,a,u,i);return this._verifyMsoMdoc(d.documents,r,u)}async _decryptCipherText(e,r,t,o){const u=await crypto.subtle.importKey("jwk",o,{name:"ECDH",namedCurve:"P-256"},!0,["deriveKey","deriveBits"]),d=new n({kem:new c,kdf:new a,aead:new s}),_=await d.createRecipientContext({recipientKey:u,enc:r,info:t});try{const r=await _.open(e);return i.decode(new Uint8Array(r))}catch(e){throw console.error("Error decrypting cipherText",e),e}}async _verifyMsoMdoc(e,r,t){const o=[],i={};let n=!0,s=!0;for(const a of e){const{claims:e,issuer:c,valid:d,invalidReasons:_}=await verifyDocument(a,t),l=c&&(r==u||c.certificate.trust_lists.some(e=>r.includes(e)));n=n&&l,s=s&&d;for(const r in e)i[r]=e[r];const p={claims:e,valid:d,trusted:!!l,document:a};c&&(p.issuer=c),d||(p.invalidReasons=_),o.push(p)}return{claims:i,valid:!!s,trusted:!!n,processedDocuments:o,sessionTranscript:t}}async _generateSessionTranscript(e,r,t){if(!e)throw new Error("Origin is required for generating session transcript");if(!r)throw new Error("Nonce is required for generating session transcript");if(!t)throw new Error("JWK is required for generating session transcript");const o=new Uint8Array(r.length/2);for(let e=0;e<r.length;e+=2)o[e/2]=parseInt(r.substr(e,2),16);const n={nonce:o,recipientPublicKey:jwkToCoseKey(t)},s=bufferToBase64Url(i.encode(["dcapi",n])),a=i.encode([s,e]),c=await crypto.subtle.digest("SHA-256",a),u=["dcapi",new Uint8Array(c)];return i.encode([null,null,u])}},createCredentialsRequest=(e={})=>{const{nonce:r=generateNonce(),jwk:t,documentTypes:o=[d.MOBILE_DRIVERS_LICENSE],claims:i=[]}=e,n=Array.isArray(o)?o:[o],s=Object.values(d),a=n.filter(e=>!s.includes(e));if(a.length>0)throw new Error(`Invalid document types: ${a.join(", ")}`);const c=Object.values(f),u=i.filter(e=>!c.includes(e));if(u.length>0)throw new Error(`Invalid claims: ${u.join(", ")}`);const l=[];for(const e of Object.values(_)){let o;e===_.OPENID4VP?o=T.createRequest(n,i,r):e===_.MDOC&&(o=C.createRequest(n,i,r,t)),o&&l.push(o)}return{mediation:"required",digital:{requests:l}}},requestCredentials=async(e,r={})=>{const{timeout:t=3e5}=r;if("undefined"==typeof window)throw new Error("getCredentials can only be called in a browser environment");if(!navigator.credentials)throw new Error("Digital Credentials API not supported in this browser");e.digital.requests=e.digital.requests.filter(e=>{const r=navigator.userAgent.includes("Safari")?_.MDOC:_.OPENID4VP;return e.protocol===r}).slice(0,1);try{const r={...e,mediation:"required",signal:AbortSignal.timeout(t)},o=await navigator.credentials.get(r);if(!o)throw new Error("No credential was provided by the user");return{id:o.id,type:o.type,data:o.data,protocol:o.protocol,timestamp:(new Date).toISOString()}}catch(e){throw console.error("Error getting credentials",e),e}},processCredentials=async(e,r={})=>{const{trustLists:t=u,origin:o=null,nonce:i=null,jwk:n=null}=r;if(!e||"object"!=typeof e)throw new Error("Invalid credential response");if(!e.data)throw new Error("Credential response missing data");if(e.protocol===_.OPENID4VP)return await T.verify(e.data,t,o,i);if(e.protocol===_.MDOC)return await C.verify(e.data,t,o,i,n);throw new Error(`Unsupported protocol: ${e.protocol}`)},generateNonce=()=>{const e=new Uint8Array(16);if("undefined"!=typeof crypto&&crypto.getRandomValues)crypto.getRandomValues(e);else for(let r=0;r<e.length;r++)e[r]=Math.floor(256*Math.random());return Array.from(e,e=>e.toString(16).padStart(2,"0")).join("")},generateJWK=async()=>{const e=await crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!0,["deriveKey","deriveBits"]);return await crypto.subtle.exportKey("jwk",e.privateKey)};export{f as Claim,l as CredentialFormat,d as DocumentType,_ as Protocol,p as ProtocolFormats,createCredentialsRequest,generateJWK,generateNonce,processCredentials,requestCredentials,setTestDataUsage};
